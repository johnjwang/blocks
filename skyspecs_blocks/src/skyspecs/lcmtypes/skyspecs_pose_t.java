/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package skyspecs.lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class skyspecs_pose_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public float pos[];
    public float pos_rate[];
    public float quat[];
    public float rot_rate[];
    public float variance[];
    public short flags;
 
    public skyspecs_pose_t()
    {
        pos = new float[3];
        pos_rate = new float[3];
        quat = new float[4];
        rot_rate = new float[3];
        variance = new float[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa2e72b611ca38c97L;
 
    public static final short FLAGS_FRAME_ROBOT = (short) 0x0001;
    public static final short FLAGS_FRAME_LOCAL = (short) 0x0002;
    public static final short FLAGS_FRAME_GLOBAL = (short) 0x0004;
    public static final short FLAGS_GROUND_TRUTH = (short) 0x0008;
    public static final short FLAGS_FRESH_CAMERA = (short) 0x0010;
    public static final short FLAGS_FRESH_LIDAR = (short) 0x0020;
    public static final short FLAGS_FRESH_ODOMETRY = (short) 0x0040;
    public static final short FLAGS_FRESH_ULTRASONIC = (short) 0x0080;
    public static final short FLAGS_FRESH_GPS = (short) 0x0100;
    public static final short FLAGS_FRESH_COMPASS = (short) 0x0200;
    public static final short FLAGS_FRESH_PRESSURE = (short) 0x0400;
    public static final long USEC_FRESH_ODOMETRY = 100000L;
    public static final long USEC_FRESH_LIDAR = 200000L;
    public static final long USEC_FRESH_ULTRASONIC = 210000L;
    public static final long USEC_FRESH_GPS = 2100000L;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(skyspecs.lcmtypes.skyspecs_pose_t.class))
            return 0L;
 
        classes.add(skyspecs.lcmtypes.skyspecs_pose_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pos[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pos_rate[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.quat[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rot_rate[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.variance[a]); 
        }
 
        outs.writeShort(this.flags); 
 
    }
 
    public skyspecs_pose_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public skyspecs_pose_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static skyspecs.lcmtypes.skyspecs_pose_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        skyspecs.lcmtypes.skyspecs_pose_t o = new skyspecs.lcmtypes.skyspecs_pose_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.pos = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pos[a] = ins.readFloat();
        }
 
        this.pos_rate = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pos_rate[a] = ins.readFloat();
        }
 
        this.quat = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.quat[a] = ins.readFloat();
        }
 
        this.rot_rate = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rot_rate[a] = ins.readFloat();
        }
 
        this.variance = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.variance[a] = ins.readFloat();
        }
 
        this.flags = ins.readShort();
 
    }
 
    public skyspecs.lcmtypes.skyspecs_pose_t copy()
    {
        skyspecs.lcmtypes.skyspecs_pose_t outobj = new skyspecs.lcmtypes.skyspecs_pose_t();
        outobj.utime = this.utime;
 
        outobj.pos = new float[(int) 3];
        System.arraycopy(this.pos, 0, outobj.pos, 0, 3); 
        outobj.pos_rate = new float[(int) 3];
        System.arraycopy(this.pos_rate, 0, outobj.pos_rate, 0, 3); 
        outobj.quat = new float[(int) 4];
        System.arraycopy(this.quat, 0, outobj.quat, 0, 4); 
        outobj.rot_rate = new float[(int) 3];
        System.arraycopy(this.rot_rate, 0, outobj.rot_rate, 0, 3); 
        outobj.variance = new float[(int) 6];
        System.arraycopy(this.variance, 0, outobj.variance, 0, 6); 
        outobj.flags = this.flags;
 
        return outobj;
    }
 
}

