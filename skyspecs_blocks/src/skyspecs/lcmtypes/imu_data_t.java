/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package skyspecs.lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class imu_data_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public float attitude[];
    public float rate[];
    public float accel[];
    public short flags;
 
    public imu_data_t()
    {
        attitude = new float[4];
        rate = new float[3];
        accel = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x90d6488d35e44f0dL;
 
    public static final short FLAGS_TYPE_MASK = (short) 0x0007;
    public static final short FLAGS_TYPE_YEI = (short) 0x0001;
    public static final short FLAGS_TYPE_MICROSTRAIN = (short) 0x0002;
    public static final short FLAGS_ATTITUDE_MASK = (short) 0x4000;
    public static final short FLAGS_ATTITUDE_QUAT = (short) 0x4000;
    public static final short FLAGS_ATTITUDE_RPH = (short) 0x0000;
    public static final short FLAGS_ACCEL_MASK = (short) 0x3000;
    public static final short FLAGS_ACCEL_BODYFIXED = (short) 0x3000;
    public static final short FLAGS_ACCEL_YAWFRAME = (short) 0x2000;
    public static final short FLAGS_ACCEL_GLOBAL = (short) 0x1000;
    public static final short FLAGS_RATE_MASK = (short) 0x0800;
    public static final short FLAGS_RATE_RPH = (short) 0x0800;
    public static final short FLAGS_RATE_BODYFIXED = (short) 0x0000;
    public static final short FLAGS_SIM = (short) 0x0080;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(skyspecs.lcmtypes.imu_data_t.class))
            return 0L;
 
        classes.add(skyspecs.lcmtypes.imu_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.attitude[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rate[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.accel[a]); 
        }
 
        outs.writeShort(this.flags); 
 
    }
 
    public imu_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public imu_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static skyspecs.lcmtypes.imu_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        skyspecs.lcmtypes.imu_data_t o = new skyspecs.lcmtypes.imu_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.attitude = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.attitude[a] = ins.readFloat();
        }
 
        this.rate = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rate[a] = ins.readFloat();
        }
 
        this.accel = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.accel[a] = ins.readFloat();
        }
 
        this.flags = ins.readShort();
 
    }
 
    public skyspecs.lcmtypes.imu_data_t copy()
    {
        skyspecs.lcmtypes.imu_data_t outobj = new skyspecs.lcmtypes.imu_data_t();
        outobj.utime = this.utime;
 
        outobj.attitude = new float[(int) 4];
        System.arraycopy(this.attitude, 0, outobj.attitude, 0, 4); 
        outobj.rate = new float[(int) 3];
        System.arraycopy(this.rate, 0, outobj.rate, 0, 3); 
        outobj.accel = new float[(int) 3];
        System.arraycopy(this.accel, 0, outobj.accel, 0, 3); 
        outobj.flags = this.flags;
 
        return outobj;
    }
 
}

